I need you to use this grammar for a set of instructions that I will be giving you:

root ::= parse
parse ::= sentence+
sentence ::= createStatement
createStatement ::= "CREATE " (createProduct | createRange | createDimension | createSensor)
createProduct ::= "PRODUCT " identifier " USING " srid ";\n\n"
createRange ::= "RANGE " identifier " (\n" rangeProperty (",\n" rangeProperty)* "\n)" ";\n\n"
rangeProperty ::= rangeNumber (" TO " rangeNumber)? " AS " text (" COLOR " hexColor)? | " DEFAULT " "AS " text (" COLOR " hexColor)?
rangeNumber ::= identifier | floatNumber | intNumber | "INFINITY" | "-INFINITY"
createDimension ::= createSpatialDimension | createCategoricalDimension
createSpatialDimension ::= "SPATIAL DIMENSION " identifier " (\n" "\tgeometry" ":" (type | " Geometry") "\n)" createDimensionProperties createParentDimension? ";\n\n"
createCategoricalDimension ::= "CATEGORICAL DIMENSION " identifier " (\n" "FIELD" ":" identifier ")" ";\n\n"
createParentDimension ::= " WITH PARENT " "(\n" identifier (",\n" identifier)* "\n)"
createDimensionProperties ::= " WITH PROPERTIES " "(\n" dimPropertyDefinition (",\n" dimPropertyDefinition)* "\n)"
dimPropertyDefinition ::= "\t" identifier type
createSensor ::= "SENSOR " identifier " (\n" "\tinterval" ": " intNumber ",\n" "\tdatasource" ": " dataSource ",\n" "\tgeometry" ":" type "\n)" createSensorProperties createSensorMeasurementData (addSpatialDimensionToSensor)* (addCategoricalDimensionToSensor)? (addBBXToSensor)? ";\n\n"
createSensorProperties ::= " WITH PROPERTIES " "(\n" sensorPropertyDefinition (",\n" sensorPropertyDefinition)* "\n)"
sensorPropertyDefinition ::= "\t" identifier type
createSensorMeasurementData ::= " WITH MEASUREMENT DATA " "(\n" createMeasurementProperty (",\n" createMeasurementProperty)* "\n)"
createMeasurementProperty ::= "\t" identifier type (" UNITS " text)? (" ICON " text)? (" RANGE " identifier)?
addSpatialDimensionToSensor ::= " WITH SPATIAL DIMENSIONS " identifier "(\n" "\t" identifier (",\n" "\t" identifier)* "\n)"
addCategoricalDimensionToSensor ::= " WITH CATEGORICAL DIMENSIONS " "(\n" "\t" identifier (" RANGE " identifier)? (",\n" "\t" identifier (" RANGE " identifier)?)* "\n)"
addBBXToSensor ::= " WITH BBOX " "(" ("[")? coordinate ("]")? ", " intNumber")"
srid ::= intNumber
identifier ::= text
text ::= [a-zA-Z] [a-zA-Z]? [a-zA-Z]? [a-zA-Z]? [a-zA-Z]? [a-zA-Z]? [a-zA-Z]? [a-zA-Z]? [a-zA-Z]? [a-zA-Z]?
quotedText ::= "\"" text "\""
ws ::= ([ \t\n] ws)?
type ::= " Long" | " Boolean" | " Float" | " Integer" | " Double" | " Localdate" | " String" | " Datetime" | " Linestring" | " Multilinestring" | " Polygon" | " Multipolygon" | " Point" | " Multipoint"
dataSource ::= "postgres" | "elasticsearch"
hexColor ::= "#" [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]
digit ::= [0-9]
digits ::= digit+
intNumber ::= digits
floatNumber ::= (digits? ".")? digits
negativeFloat ::= ("-")? floatNumber
coordinate ::= negativeFloat ", " negativeFloat
